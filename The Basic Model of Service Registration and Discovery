# The Why
Assume that your services are running in various data centers and listening on different ports. When your client sends a request to the server, how can it know which server can handle this request? This is where the Service Registration and Discovery mechanism comes into play.

# The What
Service Registration and Discovery is a crucial component of microservice architecture. It ensures that client-side requests are directed to the appropriate server.

# The How
To introduce the basic model of Service Registration and Discovery, let’s use Pokémon as an example.

Imagine you are a Pokémon trainer in the Pokémon world. After a tough fight, your Pokémon are in critical condition, and you need to find a Pokémon Center to heal them as soon as possible. You search for the nearest Pokémon Center using your Pokédex (a device owned by every Pokémon trainer). The Pokédex shows you the exact location of the nearest center. Finally, you arrive at the Pokémon Center and save your Pokémon’s lives. Congratulations!

In this example:

- You, the Pokémon trainer, represent the client.
- the Pokémon Center represents the service.
- The Pokédex acts as the Registry which knows the location of Pokémon Centers.

Now, let’s delve into the basic model of Service Registration and Discovery:

How services go online:

1. When the server-side application starts, it needs to register its information in the registry, primarily its location information.
2. Once registration is successful, the registry and the server maintain a heartbeat to ensure the service is still available.
3. Before the client makes the first call to a service, it must obtain a list of all available service nodes from the registry. The client then caches this list locally.
4. The client and the registry maintain a heartbeat and synchronize data. If there are any changes to the service, the registry notifies the client, which updates its local list of available nodes.
5. The client sends requests to the service.
6. The service returns responses to the client.

![picture here]

How services go offline:

1. The service notifies the registry that it is going offline.
2. The registry notifies the client that the service has gone offline.
3. Once the client receives the notification, it will no longer send requests to that service.
4. The service goes offline after waiting for a period of time.

![picture here]

It is worth noting that the service must wait for a period of time before it can go offline. This delay ensures that there is enough time for the registry to notify the client and for the client to stop sending requests to the service.

You can visualize the model as a triangle, with the three vertices representing the client, the registry, and the service. The sides of the triangle represent the connections between the client and the registry, the registry and the service, and the client and the service. High availability solutions involve carefully considering what to do if any vertex or any side of the triangle encounters a problem.