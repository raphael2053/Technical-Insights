# Why is Service Registration and Discovery needed?

Assume that your services are running in various data centers and listening different ports. Your client is sending a request to a server. How could it know which server could handle this request ?

similarily, Imagine that you want to order a pizza, however you remain unaware with which restrount could provide pizzas. 

You will search the nearest pizza provider on Google Map, then you get the phone number.

Finally, you call the pizza provider and make an order.

In this case, you are a client, the pizza provider is a server and Google acts as the so-called Registration Center which knows how you could contact a pizza provider.

Now itâ€™s time to get to the basic model of service registration and discovery.

# Basic Model

### Service go online:

1. When the server-side application starts, it need to register its own information in the registry, primarily location information.
2. Once the registration is successful, the registry and the server must maintain a heartbeat.
3. Before the client makes the first call to a service, it must first obtain a list of all available service nodes from the registry, and then the client will cache the list of available nodes for each service locally.
4. The client and the registry need to maintain a heartbeat and synchronize data. If there are any changes on the service, the registry will notify the client, and the client will update the local list of available nodes.
5. The client sends requests.
6. The service returns responses.

### Service go offline:

1. The service notify the registry that it is going to go offline.
2. The registry notify the client that the service has gone offline.
3. Once the client receives the notification, it will no longer send requests to that service.
4. The service goes offline after waiting for a period of time.

It is worth noting that the service has to wait for a period of time before it can go offline. This is because there is a delay from when it notifies the registry of its intention to go offline to when the client receives the notification. This delay is the minimum time the server must wait.

You can perceive the model as a triangle, with the three vertices being the client, the registry, and the service. The three sides of the triangle are client-registry, registry-service, and client-service, respectively. The high availability solution we discuss later essentially involve carefully considering what to do if any vertex or any side of of the triangle encounters a problem.
